import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java'
    id 'idea'
    id 'org.jetbrains.kotlin.jvm' version '1.1.3-2'
    id 'org.zeroturnaround.gradle.jrebel' version '1.1.5'
    id 'com.github.johnrengelman.shadow' version '2.0.1'
    id 'net.minecrell.licenser' version '0.3'
}

group = properties.group
version = properties.version
description = properties.description

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()

    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven {
        name = 'dmulloy2-repo'
        url = 'http://repo.dmulloy2.net/content/groups/public/'
    }
    maven {
        name = 'destroystokyo-repo'
        url = 'https://repo.destroystokyo.com/repository/maven-public/'
    }
    maven {
        name = 'mikroskeem-repo'
        url = 'https://repo.wut.ee/repository/mikroskeem-repo/'
    }
}


dependencies {
    // Plugin dependencies
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jre8', version: kotlin_version
    compile group: 'eu.mikroskeem', name: 'shuriken.instrumentation', version: '0.0.1-SNAPSHOT'
    compile group: 'ninja.leaping.configurate', name: 'configurate-hocon', version: '3.3'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.0'
    compile group: 'net.kyori', name: 'text', version: '1.12-SNAPSHOT'

    // Platform
    compile group: 'com.destroystokyo.paper', name: 'paper-api', version: paper_version
    compile(group: 'com.comphenix.protocol', name: 'ProtocolLib-API', version: protocollib_version) {
        exclude module: '*'
    }

    // Unit tests
    /*
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junit_version
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junit_version
    testCompile group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.0.0-M6'
    */
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.jetbrains.kotlin', name: 'kotlin-test-junit', version: kotlin_version
    testCompile group: 'org.mockito', name: 'mockito-core', version: mockito_version
    testCompile group: 'org.mockito', name: 'mockito-inline', version: mockito_version
}

// Process plugin resources
processResources {
    from(sourceSets.main.resources.srcDirs) {
        filter ReplaceTokens, tokens: [
                version: version,
                description: description
        ]
    }
}

// Kotlin compiler configuration
compileKotlin {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    kotlinOptions {
        jvmTarget = '1.8'
        apiVersion = '1.1'
        languageVersion = '1.1'
    }
}

// ShadowJar
shadowJar {
    dependencies {
        // Kotlin
        include dependency('org.jetbrains.kotlin:*')

        // Shuriken
        include dependency('eu.mikroskeem:shuriken.*')

        // Configurate
        include dependency('ninja.leaping.configurate:*')
        include dependency('com.typesafe:config')
    }

    relocate 'kotlin', 'eu.mikroskeem.toweldisguise.deps.kotlin'
    relocate 'eu.mikroskeem.shuriken', 'eu.mikroskeem.toweldisguise.deps.shuriken'
    relocate 'ninja.leaping.configurate', 'eu.mikroskeem.toweldisguise.deps.configurate'
    relocate 'com.typesafe.config', 'eu.mikroskeem.toweldisguise.deps.typesafeconfig'
}

// Licenser task
license {
    header = rootProject.file('etc/HEADER')
    ignoreFailures = false
    include '**/*.kt'
    include '**/*.java'
}

// Wrapper task
task wrapper(type: Wrapper) {
    gradleVersion = gradle_version
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradle_version-all.zip"
}

// -PuseJRebel=true
if(project.hasProperty('useJRebel') && Boolean.parseBoolean(project.getProperties().useJRebel as String))
    jar.dependsOn generateRebel

// -PdontShade=true
if(!(project.hasProperty('dontShade') && Boolean.parseBoolean(project.getProperties().dontShade as String)))
    build.dependsOn shadowJar

defaultTasks 'build'
